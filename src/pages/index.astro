---
import Layout from '../layouts/Layout.astro';
import StepProgress from '../components/StepProgress.astro';
import Step1 from '../components/steps/Step1.astro';
import Step2 from '../components/steps/Step2.astro';
import Step3 from '../components/steps/Step3.astro';

import '../animation.css'
import '../form.css'
---
<Layout title="BoraCodar#23">
	<main>
		<form>
			<StepProgress />
			<Step1 />
			<Step2 />
			<Step3 />
		</form>
	</main>
</Layout>

<style>
	main {
		width: 592px
	}
</style>

<script>
	globalThis.content = {}
	let currentStep = 0;
	const form = document.querySelector('form');

	form.addEventListener('click', (e) => {
		const currentActions = {
			prev: e.target.matches("[data-prev]"),
			next: e.target.matches("[data-next]")
		}

		Object.keys(currentActions).forEach(key => {
			if(currentActions[key]) {
				actions[key]()
				updateActiveStep()
				updateProgressStep()
			}
		})
	})

	const actions = {
		next() {
			if(currentStep >= formSteps.length) return
			if(!isValidInputs()) return
			currentStep++
		},

		prev() {
			if(currentStep == 0) return
			currentStep--
		}
	}

	form.addEventListener('submit', e => {
		e.preventDefault()
		console.log(globalThis.content)
	})
	
	const formSteps = document.querySelectorAll('.form-step')

	function updateActiveStep() {
		formSteps.forEach(step => step.classList.remove('active'))
		formSteps[currentStep].classList.add('active')
	}

	/* progress update */
	const progressSteps = document.querySelectorAll('.step-progress > div')
	function updateProgressStep() {
		progressSteps.forEach((step, idx) => {
			step.classList.remove('active')
			step.classList.remove('done')
			
			if(idx < currentStep + 1) {
				step.classList.add('active')
			}
			
			if(idx < currentStep) {
				step.classList.add('done')
			}
		})
	}

	/* validation */
	function isValidInputs() {
		const currentFormStep = formSteps[currentStep]
		const formFields = [...currentFormStep.querySelectorAll('input'), ...currentFormStep.querySelectorAll('textarea')]
		return formFields.every(input => input.reportValidity())
	}

	/* animation */
	formSteps.forEach(formStep =>{
		function addHide() {
			formStep.classList.add('hide')
		}
		formStep.addEventListener('animationend', e => {
			addHide()
			formSteps[currentStep].classList.remove('hide')
		})
	})
</script>